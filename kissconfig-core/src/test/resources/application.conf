// KissConfig currently supports the following types
// Primitive types + Strings
// List of Primitive types
// Map[String, AnyType]
// CustomTypes
// Optional Types

// Configuration can be simple assignments with Integers, Strings, Booleans
myInt = 5
myString = "myString"
myDouble = 1.5
myBoolean = true
myShort = 6
myLong = 92233720368547758

// Configuration can be list of Strings, Integers, Booleans
lists = ["1", "2", "3"]

// Configuration can be maps (key value pairs)
// however there is one assumption that the keys are always strings
map = {
  "key1" = "val1"
  "key2" = "val2"
}

// Configurations can be nested types and the fields are populated based on the fields of the custom types
// but config should contain config for all the fields, otherwise this would throw an exception in runtime
// the configuration below could correspond to the following case class
// case class PrimaryTypes(myInt: Int, myString: String, myBoolean: Boolean)
pt = {
  myInt = 5
  myString = "myString"
  myBoolean = true
}

// Configuration can also be custom types of Lists and Maps
lm = {
  lists = ["1", "2", "3"]
  map = {
    "key1" = "val1"
    "key2" = "val2"
  }
}

// you decide the naming convention of your properties
// just provide how the resolution between fieldname --> configKey is done
// the rest is taken care by KissConfig

// KissConfig proivdes (camelCase to underscore) conversion out of the box
underscore = {
  my_int = 5
  my_string = "myString"
  my_boolean = true
}

// It also provides (underscore to camelCase) conversion
camelcase = {
  myInt = 5
  myString = "myString"
  myBoolean = true
}

// It also provides (camelCase to dotCase) conversion
my = {
  int = 5
  string = "myString"
  boolean = true
}

prefix = {
  my = {
    int = 5
    string = "myString"
    boolean = true
  }
}